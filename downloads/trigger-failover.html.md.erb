---
title: Triggering Multi-Site Replication Failover and Switchover
---
<strong><%= modified_date %></strong>

The topic describes how to trigger a failover and switchover when using a Multi‑Site Replication plan.


<p class="note"><strong>Note:</strong> You can only do failovers and switchovers in
  MySQL for Pivotal Platform v2.7.3 and later.
</p>

##<a id='overview'></a> Overview

You can do failover and do switchover in a Multi‑Site Replication plan.
In both cases, when you failover or switchover,
the follower service instance is promoted to the leader.

<p class="note"><strong>Note:</strong>
  In a multi‑site replication context,
  the two Multi‑Site Replication service instances are
  referred to as a decoupled leader-follower service instance. <br> <br>
  A decoupled leader-follower service instance deployed across multiple
  foundations or data centers is different from the coupled leader-follower plan that
  MySQL for Pivotal Platform offers.
  For information about the coupled leader-follower plan,
  see <a href="./about-leader-follower.html">About Leader-Follower</a>.
</p>

The table below describes when you should trigger a failover or switchover:

<table>
  <tr>
    <th width="50%">Failover if...</th>
    <th>Switchover if your instances are healthy and you are...</th>
  </tr>

  <tr>
    <td>
      <ul>
        <li>The leader service instance is unreachable</li>
        <li>The leader service instance fails unexpectedly</li>
        <li>The performance of the leader VM degrades</li>
        <li>The availability zone where the leader VM is located goes offline unexpectedly</li>
        <li>The leader is in read-only mode</li>
      </ul>
    </td>

    <td>
      <ul>
        <li>Doing data center maintenance</li>
        <li>Upgrading your foundation. For example, upgrading stemcells.</li>
        <li>Changing your hardware</li>
        <li>Intentionally taking the data center offline</li>
        <li>Reconfiguring replication roles.
            That is, making the leader into the follower and vice versa.</li>
      </ul>
    </td>
  </tr>

</table>


##<a id='failover'></a> Trigger a Failover

If your apps cannot write to the database, your leader service instance might be down.
In this case, you should do a failover to promote the follower service instance to leader.

However, if your leader service instance is not down and in read-write mode, instead
do the procedures in [Trigger a Switchover](#switchover) below.

<p class="note warning"><strong>Warning:</strong> You should only trigger failover
  if you do not need to recover the leader service instance.
  You cannot recover the downed leader service instance.
  Also, you cannot re-establish multi‑site replication with the new leader service instance.
</p>

The following steps assume that you have created the leader
service instance in the primary foundation and the follower
service instance in the secondary foundation. You created these service instances in
[Create Multi‑Site Replication Service Instances](./use-multi-site.html#create-multi-dc).


To trigger a failover:

1. [Promote the Follower](#promote-failover)
1. [Delete the Former Leader](#clean-up)

### <a id='promote-failover'></a> Promote the Follower

<p class="note"><strong>Note:</strong> If you try to promote a coupled leader-follower,
  highly available cluster, or single node service instance to leader
  or make it read-only you get an error message similar to the following: <br><br>
<code>Updating service instance haDB as admin...
  FAILED
  Server error, status code: 502, error code: 10001, message: Service broker error: 1 error occurred:
      * the configuration parameter 'initiate-failover' is not a valid option</code>
</p>

To promote the follower service instance to leader:

1. Log in to the deployment for your secondary foundation by running:

    ```
    cf login SECONDARY-API-URL
    ```
    Where `SECONDARY-API-URL` is the API endpoint for your secondary foundation. <br>

1. Promote the follower service instance to leader by running:

    ```
    cf update-service SECONDARY-INSTANCE \
    -c '{"initiate-failover":"promote-follower-to-leader"}'
    ```
    For example:
    <pre class="terminal">$ cf update-service secondary-node \
        -c '{"initiate-failover":"promote-follower-to-leader"}'<br>
    Updating service instance secondary-node as admin...
    OK</pre>

1. If the above command fails, do one of the following:
    + If you have unapplied local transactions on the follower service instance, wait for the transactions
    to be applied and then run the above command again. The error message looks like the following:
        <pre class=terminal>Updating service instance secondary-node as admin...
        FAILED
        Server error, status code: 502, error code: 10001, message: Service broker error: Promotion of follower failed - has 1 transactions still unapplied</pre>
    + If the leader service instance is still reachable and in read-write mode, do the procedure in
        [Trigger a Switchover](#switchover) below instead. The error message looks like the following:
          <pre class=terminal>
        Updating service instance secondary-node as admin...
        FAILED
        Server error, status code: 502, error code: 10001, message: Service broker error: Promotion of follower failed - the leader is still writable</pre>

1.  Watch the progress of the service instance update by running:

    ```
    watch cf services
    ```

    Wait for the `last operation` for your instance to show as `update succeeded`.
    <br><br>
    For example:

    <pre class="terminal">$ watch cf services<br>
    Getting services in org my-org / space my-space as admin...
    OK
    name             service       plan                      bound apps    last operation
    secondary-node   p.mysql       db-pxc-single-node-small                update succeeded
  </pre>

1. Reconfigure your global DNS load balancer to direct all traffic to apps in your secondary foundation.
See [Configure Your GLB](https://docs.pivotal.io/platform/plan/global-dns-lb.html#configure-glb).

###<a id='clean-up'></a> Delete the Former Leader

When you do a failover, the leader service instance cannot be manually recovered. After you promote the follower
service instance to leader, you should delete the former leader service instance. Otherwise,
the service instance could recover in read-write mode.

To delete the former leader service instance:

1. Log in to the deployment for your primary foundation by running:

    ```
    cf login PRIMARY-API-URL
    ```
    Where `PRIMARY-API-URL` is the API endpoint for the primary foundation.

1. Remove all bindings and service keys from the former leader service instance by
    doing the procedure in [Unbind an App from a Service Instance](./use.html#unbind).

1. Delete the former leader service instance by doing the procedure in
    [Delete a Service Instance](./use.html#delete).


##<a id='switchover'></a> Trigger a Switchover

If your Multi‑Site Replication leader-follower service is running and healthy and
you want to switch the leader and follower roles for the service instances, do a switchover.

If your leader service instance is down or unhealthy, instead
do the procedures in [Trigger a Failover](#failover) above.

The following steps assume that you have created the leader
service instance in the primary foundation and the follower
service instance in the secondary foundation. You created these service instances in
[Create Multi‑Site Replication Service Instances](./use-multi-site.html#create-multi-dc).

To trigger a switchover:

1. [Promote the Follower](#promote)
1. [Reconfigure Multi‑Site Replication](#configure)


### <a id='promote-switchover'></a> Promote the Follower

<p class="note"><strong>Note:</strong> If you try to promote a coupled leader-follower,
  highly available cluster, or single node service instance to leader
  or make it read-only you get an error message similar to the following: <br><br>
<code>Updating service instance haDB as admin...
  FAILED
  Server error, status code: 502, error code: 10001, message: Service broker error: 1 error occurred:
      * the configuration parameter 'initiate-failover' is not a valid option</code>
</p>

Before you promote the follower service instance,
you must make the leader service instance, which is in the primary foundation, read-only.

To promote the follower to leader in the secondary foundation:

1. Log in to the deployment for your primary foundation by running:

    ```
    cf login PRIMARY-API-URL
    ```
    Where `PRIMARY-API-URL` is the API endpoint for the primary foundation.

1. Set the service instance that is currently the leader to read-only by running:

    ```
    cf update-service PRIMARY-INSTANCE \
      -c '{"initiate-failover":"make-leader-read-only"}
    ```

    For example:
    <pre class="terminal">$ cf update-service primary-node \
        -c '{"initiate-failover":"make-leader-read-only"}'<br>
    Updating service instance primary-node as admin...
    OK</pre>

1.  Watch the progress of the service instance update by running:

    ```
    watch cf services
    ```

    Wait for the `last operation` for your instance to show as `update succeeded`.
    <br><br>
    For example:

    <pre class="terminal">$ watch cf services<br>
    Getting services in org my-org / space my-space as admin...
    OK
    name             service       plan                      bound apps    last operation
    primary-node     p.mysql       db-pxc-single-node-small                update succeeded
  </pre>

1. Log in to the deployment for your secondary foundation by running:

    ```
    cf login SECONDARY-API-URL
    ```
    Where `SECONDARY-API-URL` is the API endpoint for your secondary foundation.

1. Promote the service instance in the secondary foundation to leader by running:

    ```
    cf update-service SECONDARY-INSTANCE \
      -c '{"initiate-failover":"promote-follower-to-leader"}'
    ```

1. If the above command fails, do one of the following:
    + If you have unapplied local transactions on the follower service instance, wait for the transactions
    to be applied and then run the above command again. The error message looks like the following:
        <pre class=terminal>Updating service instance secondary-node as admin...
        FAILED
        Server error, status code: 502, error code: 10001, message: Service broker error: Promotion of follower failed - has 1 transactions still unapplied</pre>
    + If the leader service instance is still reachable and in read-write mode, do the procedure in
        [Trigger a Switchover](#switchover) below instead. The error message looks like the following:
          <pre class=terminal>
        Updating service instance secondary-node as admin...
        FAILED
        Server error, status code: 502, error code: 10001, message: Service broker error: Promotion of follower failed - the leader is still writable</pre>
1.  Watch the progress of the service instance update by running:

    ```
    watch cf services
    ```

    Wait for the `last operation` for your instance to show as `update succeeded`.

### <a id='reconfigure'></a>Reconfigure Multi‑Site Replication

To establish a connection between the service instances in the primary and secondary foundations,
you must reconfigure replication. Reconfiguring replication is similar to the procedure in
[Configure Multi‑Site Replication](./use-multi-site.html#create-service-key) except the
service instance in the primary foundation is the follower and the service instance
in the secondary foundation is the leader.

The following diagram describes the workflow for reconfiguring multi-site replication:

![diagram summarizes the procedure below](switchover.png)

<a href="./images/switchover.png" target="_blank">View a larger version of this diagram</a>

<p class='note warning'><strong>Warning:</strong> You must reconfigure
  multi‑site replication within three days of promoting the follower service instance.
  This is because MySQL for Pivotal Platform does not retain binary logs after three days.
</p>


To reconfigure replication for the service instances:

1. Log in to the deployment for your primary foundation by running:

    ```
    cf login PRIMARY-API-URL
    ```

1. Create a host-info service key for the service instance in your primary foundation:

    ```
    cf create-service-key PRIMARY-INSTANCE SERVICE-KEY \
      -c '{"replication-request": "host-info"}
    ```
    Where:
    + `PRIMARY-INSTANCE` is the name of the follower service instance in the primary foundation.
    + `SERVICE-KEY` is a name you choose for the host-info service key.

    For example:
    <pre class="terminal">$ cf create-service-key primary-node host-info \
          -c '{"replication-request": "host-info" }' <br>
    Creating service key host-info for service instance primary-node as admin...
    OK
    </pre>

1. View the `replication-credentials` for your host-info service key by running:

    ```
    cf service-key PRIMARY-INSTANCE SERVICE-KEY
    ```
    Where:
    + `PRIMARY-INSTANCE` is the name of the follower service instance in the primary foundation.
    + `SERVICE-KEY` is the name of the host-info service key you created in step above.

    For example:

    <pre class="terminal">$ cf service-key primary-node host-info-key <br>
    Getting key host-info-key for service instance primary-node as admin...

      {
        "replication": {
            "peer-info": {
              "hostname": "primary.bosh",
              "ip": "10.0.19.12",
              "system_domain": "sys.primary-domain.com",
              "uuid": "ab12cd34-5678-91e2-345f-67891h234567"
          },
          "role": "leader"
        }
      }</pre>

1. Record the output of the above command.

1. Log in to the deployment for your secondary foundation by running:

    ```
    cf login SECONDARY-API-URL
    ```

1. Update your leader service instance in the secondary foundation with the host-info service key
   by running the following command:

    ```
    cf update-service SECONDARY-INSTANCE -c HOST-INFO
    ```
    Where:
    + `SECONDARY-INSTANCE` is the name of the leader service instance in the secondary foundation.
    + `HOST-INFO` is the output you recorded in step above.

    For example:
    <pre class="terminal">$ cf update-service secondary-node -c {"replication":{ \
      "peer-info":{ \
          "hostname": "primary.bosh", \
          "ip": "10.0.18.12", \
          "system_domain": "sys.primary-domain.com", \
          "uuid": "ab12cd34-5678-91e2-345f-67891h234567" \
        },\
      "role": "leader" \
      } \
    }<br>
  Updating service instance secondary-node as admin...
  OK</pre>
1.  Watch the progress of the service instance update by running:

    ```
    watch cf services
    ```

    Wait for the `last operation` for your instance to show as `update succeeded`.

1.  Create a credentials service key for the service instance in your secondary foundation by
    running:

    ```
    cf create-service-key SECONDARY-INSTANCE SERVICE-KEY-NAME \
      -c '{"replication-request": "credentials"}
    ```
    Where:
    + `SECONDARY-INSTANCE` is the name of the service instance in the secondary foundation.
    + `SERVICE-KEY-NAME` is a name you choose for the credentials service key.

    For example:
    <pre class="terminal">$ cf create-service-key secondary-node cred-key \
        -c '{"replication-request": "credentials" }'<br>
    Creating service key cred-key for service instance secondary-node as user<span>@</span>example.com...
    OK
    </pre>
    <p class="note"><strong>Note:</strong> The <code>-c </code> flag is different than the one in step 2 above.
    </p>

1. View the `replication-credentials` for your credentials service key by running:

    ```
    cf service-key SECONDARY-INSTANCE SERVICE-KEY-NAME
    ```
    Where:
    + `SECONDARY-INSTANCE` is the name of the leader service instance in the secondary foundation.
    + `SERVICE-KEY-NAME` is the name of the credentials service key you created in step 7, above.

    For example:

    <pre class="terminal">$ cf service-key secondary-node cred-key <br>
    Getting key cred-key for service instance secondary as admin...

      {
        "replication": {
          "credentials": {
            "password": "a22aaa2a2a2aaaaa",
            "username": "6bf07ae455a14064a9073cec8696366c"
          },
          "peer-info": {
            "hostname": "secondary.bosh",
            "ip": "10.0.17.12",
            "system_domain": "sys.secondary-domain.com",
            "uuid": "zy98xw76-5432-19v8-765u-43219t876543"
          },
          "role": "follower"
        }
      }</pre>

1. Record the output of the above command.

1. Log in to the deployment for your primary foundation by running:

    ```
    cf login PRIMARY-API-URL
    ```
1. Update the follower service instance in the primary foundation with the credentials service key by running:

    ```
    cf update-service PRIMARY-INSTANCE -c CREDENTIALS
    ```
    Where:
    + `PRIMARY-INSTANCE` is name of the follower service instance in the primary foundation.
    + `CREDENTIALS` is the output you recorded in the step above.

    For example:
    <pre class="terminal">$ cf update-service primary-node -c {"replication": { \
        "credentials": { \
          "password": "a22aaa2a2a2aaaaa", \
          "username": "6bf07ae455a14064a9073cec8696366c" \
        }, \
        "peer-info": { \
          "hostname": "secondary.bosh", \
          "ip": "10.0.17.12", \
          "system_domain": "sys.secondary-domain.com", \
          "uuid": "zy98xw76-5432-19v8-765u-43219t876543" \
        }, \
        "role": "follower" \
      } \
    }<br>
  Updating service instance primary-node as admin...
  OK</pre>

1.  Watch the progress of the service instance update by running:

    ```
    watch cf services
    ```

    Wait for the `last operation` for your instance to show as `update succeeded`. <br><br>
    You should now have a leader-follower service instance successfully configured,
    where the leader is in your secondary foundation and your follower is in the primary foundation.

1. Reconfigure your global DNS load balancer to direct traffic to the correct foundations of your choice.
See [Configure Your GLB](https://docs.pivotal.io/platform/plan/global-dns-lb.html#configure-glb).
